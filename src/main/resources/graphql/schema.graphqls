type Query {

    obtenerDashboard:Dashboard

    listaVoluntarios:[Reporte!]

    obtenerPreguntasPorTests: PreguntasPorTest!

    obtenerCapacitaciones: [Capacitacion!]

    obtenerNecesidades: [Necesidad!]

    reportesVoluntarios(historialId: Int): [Reporte!]

    evaluacionesVoluntarios(historialId: Int): [Evaluacion!]

    obtenerEvaluacionPorId(id: Int!): Evaluacion

    preguntasPorTest(testId: Int!): [Pregunta]

    usuariosLista:[Usuario!]

    obtnenerUniversidades:[Universidad!]

    estadoEvaluacion(id: Int!):Boolean

    obtenerCursosVoluntario(id: Int!):[CursoProgreso]
}

type Mutation {

    agregarUniversidad(input: UniversidadInput):Universidad
    actualizarUniversidad(input: UniversidadInput):Universidad
    eliminarUniversidad(id: ID!): Boolean

    actualizarPregunta(id: ID!, texto: String!): Pregunta
    agregarPregunta(testId: ID!, texto: String!, tipo: String!): Pregunta
    eliminarPregunta(id: ID!): Boolean

    crearCapacitacion(input: inputAgregarCapacitacion): Capacitacion
    editarCapacitacion(input: inputAgregarCapacitacion): Capacitacion
    eliminarCapacitacion(id: ID!): Boolean

    crearNecesidad(tipo: String!, descripcion: String!): Necesidad
    editarNecesidad(id: ID!, tipo: String, descripcion: String): Necesidad
    eliminarNecesidad(id: ID!): Boolean

    crearEvaluacion(id: ID!): Boolean

    enviarRespuestas(input: ReporteEvaluacionInput!): Boolean!
    enviarRespuestasPrueba(input: PruebaEvaluacionInput!): RespuestaPrueba!

    agregarCapacitacionesAReporte(reporteId: Int!, capacitacionIds: [Int!]!): Boolean
    agregarNecesidadesAReporte(reporteId: Int!, necesidadIds: [Int!]!): Boolean

    registroUsuario(input: UsuarioInput!): Usuario

    nuevoUsuarioGlobal(input: inputUsuarioGlobal!): User

    login(ci: String!, password: String!): Acceso

    activarAdmin(id: ID!): Boolean
    desactivarAdmin(id: ID!): Boolean

    actualizarPassword(id: ID!, password: String!):String

    agregarUniversidadEvaluacion(idEvaluacion: ID!, idUniversidad: ID!): Evaluacion
    quitarEvaluacionUniversidad(id: ID!): Evaluacion

    cambiarEstadoEtapa(id: ID!): Boolean


}

input inputUsuarioGlobal {
    nombre: String
    apellido: String
    email: String
    ci: String
    telefono: String
}

input inputCurso{
    id:ID
    nombre:String
    descripcion: String
    etapas:[inputEtapasCapacitacion]
}
input inputEtapasCapacitacion{
    id:ID
    nombre:String
    orden:Int
}
input inputAgregarCapacitacion{
    id:ID
    nombre:String!
    descripcion:String!
    cursos: [inputCurso]
}


type User {
    id: ID!
    nombre: String!
    apellido: String!
    email: String!
    ci: String!
    telefono: String
}


type Acceso {
    token: String!
    id: ID
    acceso:Boolean!
}

input UsuarioInput {
    nombre: String!
    apellido: String!
    email: String!
    ci: String!
    telefono: String!
}

input RespuestaInput {
    preguntaId: Int!
    textoPregunta: String!
    respuestaTexto: String!
}

input EvaluacionRespuestaInput {
    evaluacionId: Int!
    respuestas: [RespuestaInput!]!
}


input EvaluacionRespuestaPruebaInput {
    testId: Int!
    respuestas: [RespuestaInput!]!
}
type RespuestaPrueba{
    respuestaFisico: String!
    respuestaEmocional: String!
}

input PruebaEvaluacionInput {
    evaluaciones: [EvaluacionRespuestaPruebaInput!]!
}

input ReporteEvaluacionInput {
    estado: String
    reporteId: Int!
    evaluaciones: [EvaluacionRespuestaInput!]!
}

input UniversidadInput{
    id: ID
    nombre: String
    direccion: String
    telefono: String
}

type Universidad{
    id: ID
    nombre: String
    direccion: String
    telefono: String
    evaluaciones: [Evaluacion]
}

type Usuario {
    id: ID!
    nombre: String!
    apellido: String!
    email: String!
    ci: String!
    telefono: String!
    password:String
    activo: Boolean!
}

type PreguntasPorTest {
    test1: [Pregunta!]
    test2: [Pregunta!]
}

type Dashboard{
    reportes:[Reporte!]
    report_cantidad: Int!
    eva_cantidad:Int!
    capacitacion: [DashCapacitacion!]
    necesidad: [DashNecesidades!]
    universidad: [DashUniversidades!]
}
type DashCapacitacion{
    nombre:String!
    cantidad:Int!
}
type DashNecesidades{
    nombre:String!
    cantidad:Int!
}
type DashUniversidades{
    nombre:String!
    cantidad:Int!
}
type HistorialClinico {
    id: ID!
    fechaInicio: String!
    fechaActualizacion: String!
    reportes: [Reporte!]
}

type Reporte {
    id: ID!
    fechaGenerado: String!
    resumenFisico: String
    resumenEmocional: String
    estadoGeneral: String
    recomendaciones: String
    observaciones: String
    evaluaciones: [Evaluacion!]
    capacitaciones: [Capacitacion!]
    necesidades: [Necesidad!]
    historialClinico: HistorialClinico!
}

type Evaluacion {
    id: ID!
    test: Test!
    fecha: String!
    respuestas: [Respuesta!]
    universidad: Universidad
}

type Test {
    id: ID!
    nombre: String!
    descripcion: String
    categoria: String
    preguntas: [Pregunta!]
}

type Pregunta {
    id: ID!
    texto: String!
    tipo: String!
}

type Respuesta {
    id: ID!
    pregunta: Pregunta!
    textoPregunta: String!
    respuestaTexto: String!
}

type Capacitacion {
    id: ID!
    nombre: String!
    descripcion: String
    cursos:[Cursos]
}

type Necesidad {
    id: ID!
    tipo: String!
    descripcion: String
}

type Cursos{
    id: ID!
    nombre: String!
    etapas:[Etapas!]
    capacitacion:Capacitacion
}

type Etapas{
    id:ID!
    nombre:String!
    orden:Int!
    curso:Cursos
}

type ProgresoVoluntario {
    id: ID!
    historialClinico:HistorialClinico
    estado: String!
    etapa:Etapas
    fechaInicio: String!
    fechaFechaFinalizacion: String!
}

type EtapaProgreso{
    id:ID!
    nombre:String
    orden:Int
    estado:String
    fechaInicio:String
    fechaFinalizacion:String
}

type CursoProgreso{
    id:ID!
    nombre:String
    descripcion:String
    etapas:[EtapaProgreso]
}