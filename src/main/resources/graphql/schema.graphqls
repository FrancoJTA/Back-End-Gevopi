type Query {

    obtenerDashboard:Dashboard

    listaVoluntarios:[Reporte!]

    obtenerPreguntasPorTests: PreguntasPorTest!

    obtenerCapacitaciones: [Capacitacion!]

    obtenerNecesidades: [Necesidad!]

    reportesVoluntarios(historialId: Int): [Reporte!]

    evaluacionesVoluntarios(historialId: Int): [Evaluacion!]

    obtenerEvaluacionPorId(id: Int!): Evaluacion

    preguntasPorTest(testId: Int!): [Pregunta]

    usuariosLista:[Usuario!]

}

type Mutation {

    actualizarPregunta(id: ID!, texto: String!): Pregunta
    agregarPregunta(testId: ID!, texto: String!, tipo: String!): Pregunta
    eliminarPregunta(id: ID!): Boolean

    crearCapacitacion(nombre: String!, descripcion: String!): Capacitacion
    editarCapacitacion(id: ID!, nombre: String, descripcion: String): Capacitacion
    eliminarCapacitacion(id: ID!): Boolean

    crearNecesidad(tipo: String!, descripcion: String!): Necesidad
    editarNecesidad(id: ID!, tipo: String, descripcion: String): Necesidad
    eliminarNecesidad(id: ID!): Boolean

    crearEvaluacion(id: ID!): Boolean

    enviarRespuestas(input: ReporteEvaluacionInput!): Boolean!

    agregarCapacitacionesAReporte(reporteId: Int!, capacitacionIds: [Int!]!): Boolean
    agregarNecesidadesAReporte(reporteId: Int!, necesidadIds: [Int!]!): Boolean

    registroUsuario(input: UsuarioInput!): Usuario
    nuevoUsuarioGlobal(input: UsuarioInput!): Boolean
    login(ci: String!, password: String!): Acceso

    activarAdmin(id: ID!): Boolean
    desactivarAdmin(id: ID!): Boolean

    actualizarPassword(id: ID!, password: String!):String
}

type Acceso {
    token: String!
    id: ID
    acceso:Boolean!
}

input UsuarioInput {
    nombre: String!
    apellido: String!
    email: String!
    ci: String!
    telefono: String!
}

input RespuestaInput {
    preguntaId: Int!
    textoPregunta: String!
    respuestaTexto: String!
}

input EvaluacionRespuestaInput {
    evaluacionId: Int!
    respuestas: [RespuestaInput!]!
}

input ReporteEvaluacionInput {
    estado: String
    reporteId: Int!
    evaluaciones: [EvaluacionRespuestaInput!]!
}

type Usuario {
    id: ID!
    nombre: String!
    apellido: String!
    email: String!
    ci: String!
    telefono: String!
    password:String
    activo: Boolean!
}

type PreguntasPorTest {
    test1: [Pregunta!]
    test2: [Pregunta!]
}

type Dashboard{
    reportes:[Reporte!]
    report_cantidad: Int!
    eva_cantidad:Int!
}

type HistorialClinico {
    id: ID!
    fechaInicio: String!
    fechaActualizacion: String!
    reportes: [Reporte!]
}

type Reporte {
    id: ID!
    fechaGenerado: String!
    resumenFisico: String
    resumenEmocional: String
    estadoGeneral: String
    recomendaciones: String
    observaciones: String
    evaluaciones: [Evaluacion!]
    capacitaciones: [Capacitacion!]
    necesidades: [Necesidad!]
    historialClinico: HistorialClinico!
}

type Evaluacion {
    id: ID!
    test: Test!
    fecha: String!
    respuestas: [Respuesta!]
}

type Test {
    id: ID!
    nombre: String!
    descripcion: String
    categoria: String
    preguntas: [Pregunta!]
}

type Pregunta {
    id: ID!
    texto: String!
    tipo: String!
}

type Respuesta {
    id: ID!
    pregunta: Pregunta!
    textoPregunta: String!
    respuestaTexto: String!
}

type Capacitacion {
    id: ID!
    nombre: String!
    descripcion: String
}

type Necesidad {
    id: ID!
    tipo: String!
    descripcion: String
}